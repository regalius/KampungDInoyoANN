var momentum=0.1;
var learnrate=0.1;
var powerFactor = 1;
var errorThreshold=0.00001;
var pola;
var error = 1.0;
var epoch = 0;
var maxEpoch = 10000;
var item = "sovenir";
var state = "learning"; //state learning
var inputs=[];
var biasVal = [];
var initVal = [];
var helperIndex  = 0;

var sovenir = 
[[17098,18018,19423,20182], //training
[18018,19423,20182,20655],
[19423,20182,20655,21116],
[20182,20655,21116,22487],
[17292,18124,19401,20302],
[18124,19401,20302,20891],
[19401,20302,20891,21280],
[20302,20891,21280,22392],
[17245,18257,19521,20258],
[18257,19521,20258,20989],
[19521,20258,20989,21422],
[20258,20989,21422,22584],
[17332,18256,19612,20312],
[18256,19612,20312,21078],
[19612,20312,21078,21570],
[20312,21078,21570,22294],
[17447,18501,19670,20494],
[18501,19670,20494,21066],
[19670,20494,21066,21410],
[20494,21066,21410,22595],
[17392,18584,19799,20564],
[18584,19799,20564,21159],
[19799,20564,21159,21753],
[20564,21159,21753,22672],
[17562,18620,19892,20674],
[18620,19892,20674,21073],
[19892,20674,21073,21793],
[20645,21063,21937,22878],
[17548,18775,20034,20645],
[18775,20034,20645,21063],
[20034,20645,21063,21937],
[20645,21063,21937,22878],
[17725,18854,20025,20637],
[18854,20025,20637,21344],
[20025,20637,21344,22050],
[20637,21344,22050,22928],
[17742,19102,20028,20668],
[19102,20028,20668,21352],
[20028,20668,21352,22164],
[20668,21352,22164,23023],
[17859,19295,19958,20734],
[19295,19958,20734,21412],
[19958,20734,21412,22294],
[20734,21412,22294,22942],
[18005,19350,19862,20664],
[19350,19862,20664,21335],
[19862,20664,21335,22347],
[20664,21335,22347,22925], //testing
[20655,21116,22487,22990],
[21116,22487,22990,23473],
[20891,21280,22392,23149],
[21280,22392,23149,23305],
[20989,21422,22584,23178],
[21422,22584,23178,23259],
[21078,21570,22294,23238],
[21570,22294,23238,23284],
[21066,21410,22595,23169],
[21410,22595,23169,23301],
[21159,21753,22672,22792],
[21753,22672,22792,23520],
[21073,21793,22673,23150],
[21793,22673,23150,23720],
[21063,21937,22878,23148],
[21937,22878,23148,23854],
[21344,22050,22928,22963],
[22050,22928,22963,24190],
[21352,22164,23023,22950],
[22164,23023,22950,24329],
[21412,22294,22942,23115],
[22294,22942,23115,24205],
[21335,22347,22925,23284],
[22347,22925,23284,24402],
[22487,22990,23473,0],       //prediksi
[22392,23149,23305,0],
[22584,23178,23259,0],
[22294,23238,23284,0],
[22595,23169,23301,0],
[22672,22792,23520,0],
[22673,23150,23720,0],
[22878,23148,23854,0],
[22928,22963,24190,0],
[23023,22950,24329,0],
[22942,23115,24205,0],
[22925,23284,24402,0]];

var pajangan = 
[[6684,7196,6846,7155],
[7196,6846,7155,6978],
[6846,7155,6978,6824],
[7155,6978,6824,6769],
[6763,7065,6798,7044],
[7065,6798,7044,6821],
[6798,7044,6821,6673],
[7044,6821,6673,6859],
[6689,7066,7025,7034],
[7066,7025,7034,6659],
[7025,7034,6659,6776],
[7034,6659,6776,6936],
[6788,7040,6935,7100],
[7040,6935,7100,6828],
[6935,7100,6828,6692],
[7100,6828,6692,6878],
[6745,6936,7125,7253],
[6936,7125,7253,6716],
[7125,7253,6716,6737],
[7253,6716,6737,6814],
[6647,6925,7120,7214],
[6925,7120,7214,6725],
[7120,7214,6725,6808],
[7214,6725,6808,6908],
[6695,6853,7246,7181],
[6853,7246,7181,6740],
[7246,7181,6740,6760],
[7207,6681,6824,6959],
[6700,6811,7124,7207],
[6811,7124,7207,6681],
[7124,7207,6681,6824],
[7207,6681,6824,6959],
[6554,7011,7064,6783],
[7011,7064,6783,6783],
[7064,6783,6783,6785],
[6783,6783,6785,7023],
[6840,6926,7185,6725],
[6926,7185,6725,6672],
[7185,6725,6672,6812],
[6725,6672,6812,6968],
[6728,6793,7240,6777],
[6793,7240,6777,6621],
[7240,6777,6621,7010],
[6777,6621,7010,6947],
[6912,6901,7113,6689],
[6901,7113,6689,6797],
[7113,6689,6797,6893],
[6689,6797,6893,6696],
[6978,6824,6769,6913],
[6824,6769,6913,7799],
[6821,6673,6859,7135],
[6673,6859,7135,7774],
[6659,6776,6936,7316],
[6776,6936,7316,7531],
[6828,6692,6878,7377],
[6692,6878,7377,7393],
[6716,6737,6814,7371],
[6737,6814,7371,7430],
[6725,6808,6908,7295],
[6808,6908,7295,7472],
[6740,6760,6742,7301],
[6760,6742,7301,7513],
[6681,6824,6959,7262],
[6824,6959,7262,7494],
[6783,6785,7023,7282],
[6785,7023,7282,7589],
[6672,6812,6968,7334],
[6812,6968,7334,7724],
[6621,7010,6947,7242],
[7010,6947,7242,7735],
[6797,6893,6696,7387],
[6893,6696,7387,7553],
[6769,6913,7799,0],
[6859,7135,7774,0],
[6936,7316,7531,0],
[6878,7377,7393,0],
[6814,7371,7430,0],
[6908,7295,7472,0],
[6742,7301,7513,0],
[6959,7262,7494,0],
[7023,7282,7589,0],
[6968,7334,7724,0],
[6947,7242,7735,0],
[6696,7387,7553,0]
];	

var alatRumahTangga = [[814,915,921,925],
[915,921,925,888],
[921,925,888,820],
[925,888,820,821],
[832,881,912,918],
[881,912,918,884],
[912,918,884,844],
[918,884,844,831],
[834,889,906,921],
[889,906,921,815],
[906,921,815,813],
[921,815,813,847],
[775,888,905,931],
[888,905,931,805],
[905,931,805,823],
[931,805,823,844],
[780,886,911,949],
[886,911,949,798],
[911,949,798,830],
[949,798,830,837],
[841,890,901,932],
[890,901,932,806],
[901,932,806,842],
[932,806,842,839],
[789,891,909,929],
[891,909,929,791],
[909,929,791,826],
[929,791,826,846],
[848,894,922,910],
[894,922,910,793],
[922,910,793,817],
[910,793,817,848],
[860,901,924,891],
[901,924,891,798],
[924,891,798,835],
[891,798,835,842],
[870,891,930,870],
[891,930,870,791],
[930,870,791,827],
[870,791,827,890],
[860,911,961,879],
[911,961,879,832],
[961,879,832,816],
[879,832,816,866],
[852,944,945,841],
[944,945,841,812],
[945,841,812,825],
[841,812,825,834],
[888,820,821,838],
[820,821,838,848],
[884,844,831,835],
[844,831,835,846],
[815,813,847,852],
[813,847,852,828],
[805,823,844,827],
[823,844,827,840],
[798,830,837,838],
[830,837,838,839],
[806,842,839,831],
[842,839,831,843],
[791,826,846,852],
[826,846,852,841],
[793,817,848,831],
[817,848,831,851],
[798,835,842,864],
[835,842,864,866],
[791,827,890,830],
[827,890,830,875],
[832,816,866,843],
[816,866,843,847],
[812,825,834,849],
[825,834,849,810],
[821,838,848,0],
[831,835,846,0],
[847,852,828,0],
[844,827,840,0],
[837,838,839,0],
[839,831,843,0],
[846,852,841,0],
[848,831,851,0],
[842,864,866,0],
[890,830,875,0],
[866,843,847,0],
[834,849,810,0]
];						
var dataSovenir = [[0,0.298314,0.753891,1],
[0,0.532802,0.82063,1],
[0,0.448317,0.727702,1],
[0,0.205206,0.405206,1],
[0,0.276412,0.700664,1],
[0,0.461511,0.787134,1],
[0,0.47951,0.792975,1],
[0,0.281818,0.467943,1],
[0,0.335878,0.755393,1],
[0,0.462665,0.73243,1],
[0,0.387691,0.772225,1],
[0,0.314273,0.50043,1],
[0,0.310067,0.765101,1],
[0,0.48051,0.728561,1],
[0,0.357508,0.748723,1],
[0,0.386478,0.634712,1],
[0,0.345914,0.72957,1],
[0,0.45575,0.776998,1],
[0,0.473563,0.802299,1],
[0,0.272251,0.435983,1],
[0,0.375788,0.758827,1],
[0,0.471845,0.768932,1],
[0,0.391505,0.696008,1],
[0,0.282258,0.564042,1],
[0,0.339974,0.748715,1],
[0,0.518549,0.837342,1],
[0,0.411362,0.621252,1],
[0,0.187192,0.578594,1],
[0,0.39619,0.802712,1],
[0,0.550262,0.817308,1],
[0,0.321072,0.540725,1],
[0,0.187192,0.578594,1],
[0,0.387706,0.789835,1],
[0,0.470281,0.716064,1],
[0,0.302222,0.651358,1],
[0,0.308599,0.616761,1],
[0,0.464798,0.781271,1],
[0,0.411556,0.696,1],
[0,0.299625,0.61985,1],
[0,0.290446,0.635244,1],
[0,0.499478,0.730087,1],
[0,0.313179,0.679735,1],
[0,0.332192,0.622432,1],
[0,0.307065,0.706522,1],
[0,0.505829,0.698383,1],
[0,0.257935,0.661965,1],
[0,0.322736,0.592757,1],
[0,0.296771,0.744361,1],
[0,0.19743,0.784582,1],
[0,0.581672,0.795078,1],
[0,0.172276,0.664748,1],
[0,0.549136,0.922963,1],
[0,0.197807,0.728643,1],
[0,0.632553,0.955906,1],
[0,0.227778,0.562963,1],
[0,0.422404,0.973162,1],
[0,0.163576,0.727057,1],
[0,0.626653,0.930196,1],
[0,0.363748,0.926516,1],
[0,0.520091,0.588002,1],
[0,0.346654,0.770342,1],
[0,0.456668,0.704203,1],
[0,0.419185,0.870504,1],
[0,0.490871,0.631716,1],
[0,0.436072,0.978382,1],
[0,0.41028,0.426636,1],
[0,0.485937,1,0.956314],
[0,0.396767,0.363048,1],
[0,0.51791,0.898415,1],
[0,0.339089,0.429618,1],
[0,0.519241,0.815803,1],
[0,0.281265,0.455961,1],
[0,0.510142,1,0],
[0,0.829135,1,0],
[0,0.88,1,0],
[0,0.953535,1,0],
[0,0.813031,1,0],
[0,0.141509,1,0],
[0,0.455587,1,0],
[0,0.276639,1,0],
[0,0.027734,1,0],
[0.052937,0,1,0],
[0,0.136975,1,0],
[0,0.24306,1,0]
];

var dataPajangan = [[0,1,0.316406,0.919922],
[1,0,0.882857,0.377143],
[0.066465,1,0.465257,0],
[1,0.541451,0.142487,0],
[0,1,0.115894,0.930464],
[1,0,0.921348,0.086142],
[0.336927,1,0.398922,0],
[1,0.398922,0,0.501348],
[0,1,0.891247,0.915119],
[1,0.899263,0.921376,0],
[0.976,1,0,0.312],
[1,0,0.312,0.738667],
[0,0.807692,0.471154,1],
[0.779412,0.393382,1,0],
[0.595588,1,0.333333,0],
[1,0.333333,0,0.455882],
[0,0.375984,0.748031,1],
[0.409683,0.761639,1,0],
[0.761639,1,0,0.039106],
[1,0,0.039106,0.182495],
[0,0.4903,0.834215,1],
[0.408998,0.807771,1,0],
[0.807771,1,0,0.169734],
[1,0,0.169734,0.374233],
[0,0.286751,1,0.882033],
[0.22332,1,0.871542,0],
[1,0.871542,0,0.039526],
[1,0,0.271863,0.528517],
[0,0.218935,0.836292,1],
[0.247148,0.842205,1,0],
[0.842205,1,0,0.271863],
[1,0,0.271863,0.528517],
[0,0.896078,1,0.44902],
[0.811388,1,0,0],
[1,0,0,0.007117],
[0,0,0.008333,1],
[0.25,0.436957,1,0],
[0.495127,1,0.103314,0],
[1,0.103314,0,0.272904],
[0.179054,0,0.472973,1],
[0,0.126953,1,0.095703],
[0.277868,1,0.252019,0],
[1,0.252019,0,0.628433],
[0.401028,0,1,0.838046],
[0.525943,0.5,1,0],
[0.5,1,0,0.254717],
[1,0,0.254717,0.481132],
[0,0.529412,1,0.034314],
[1,0.263158,0,0.688995],
[0.053398,0,0.139806,1],
[0.320346,0,0.402597,1],
[0,0.168937,0.419619,1],
[0,0.178082,0.421613,1],
[0,0.211921,0.715232,1],
[0.19854,0,0.271533,1],
[0,0.265335,0.977175,1],
[0,0.032061,0.149618,1],
[0,0.111111,0.914863,1],
[0,0.145614,0.321053,1],
[0,0.150602,0.733434,1],
[0,0.035651,0.003565,1],
[0.023346,0,0.725032,1],
[0,0.246127,0.478485,1],
[0,0.201493,0.653731,1],
[0,0.004008,0.480962,1],
[0,0.29602,0.618159,1],
[0,0.21148,0.44713,1],
[0,0.171053,0.572368,1],
[0,0.626409,0.52496,1],
[0.079949,0,0.374365,1],
[0.146165,0.285094,0,1],
[0.229872,0,0.806301,1],
[0,0.139806,1,0],
[0,0.301639,1,0],
[0,0.638655,1,0],
[0,0.968932,1,0],
[0,0.904221,1,0],
[0,0.68617,1,0],
[0,0.725032,1,0],
[0,0.566355,1,0],
[0,0.457597,1,0],
[0,0.484127,1,0],
[0,0.374365,1,0],
[0,0.806301,1,0]
];

var dataAlatRumahTangga = [[0,0.90991,0.963964,1],
[0.72973,0.891892,1,0],
[0.961905,1,0.647619,0],
[1,0.647619,0,0.009524],
[0,0.569767,0.930233,1],
[0,0.837838,1,0.081081],
[0.918919,1,0.540541,0],
[1,0.609195,0.149425,0],
[0,0.632184,0.827586,1],
[0.698113,0.858491,1,0],
[0.861111,1,0.018519,0],
[1,0.018519,0,0.314815],
[0,0.724359,0.833333,1],
[0.65873,0.793651,1,0],
[0.793651,1,0,0.142857],
[1,0,0.142857,0.309524],
[0,0.627219,0.775148,1],
[0.582781,0.748344,1,0],
[0.748344,1,0,0.211921],
[1,0,0.211921,0.258278],
[0,0.538462,0.659341,1],
[0.666667,0.753968,1,0],
[0.753968,1,0,0.285714],
[1,0,0.285714,0.261905],
[0,0.728571,0.857143,1],
[0.724638,0.855072,1,0],
[0.855072,1,0,0.253623],
[1,0,0.253623,0.398551],
[0,0.621622,1,0.837838],
[0.782946,1,0.906977,0],
[1,0.906977,0,0.186047],
[1,0,0.205128,0.470085],
[0,0.640625,1,0.484375],
[0.81746,1,0.738095,0],
[1,0.738095,0,0.293651],
[1,0,0.397849,0.473118],
[0,0.35,1,0],
[0.719424,1,0.568345,0],
[1,0.568345,0,0.258993],
[0.79798,0,0.363636,1],
[0,0.50495,1,0.188119],
[0.612403,1,0.364341,0],
[1,0.434483,0.110345,0],
[1,0.253968,0,0.793651],
[0.105769,0.990385,1,0],
[0.992481,1,0.218045,0],
[1,0.218045,0,0.097744],
[1,0,0.448276,0.758621],
[1,0,0.014706,0.264706],
[0,0.035714,0.642857,1],
[1,0.245283,0,0.075472],
[0.866667,0,0.266667,1],
[0.051282,0,0.871795,1],
[0,0.871795,1,0.384615],
[0,0.461538,1,0.564103],
[0,1,0.190476,0.809524],
[0,0.8,0.975,1],
[0,0.777778,0.888889,1],
[0,1,0.916667,0.694444],
[0.916667,0.666667,0,1],
[0,0.57377,0.901639,1],
[0,0.769231,1,0.576923],
[0,0.436364,1,0.690909],
[0,0.911765,0.411765,1],
[0,0.560606,0.666667,1],
[0,0.225806,0.935484,1],
[0,0.363636,1,0.393939],
[0,1,0.047619,0.761905],
[0.32,0,1,0.54],
[0,1,0.54,0.62],
[0,0.351351,0.594595,1],
[0.384615,0.615385,1,0],
[0,0.62963,1,0],
[0,0.266667,1,0],
[0.791667,1,0,0],
[1,0,0.764706,0],
[0,0.5,1,0],
[0.666667,0,1,0],
[0.454545,1,0,0],
[0.85,0,1,0],
[0,0.916667,1,0],
[1,0,0.75,0],
[1,0,0.173913,0],
[0.615385,1,0,0]
];

function normalisasi(data,norm){
	for(var i=0; i < 72 ; i++){
		for(var j=0; j<4; j++){
			norm[i][j] = (data[i][j] - Math.min(data[i][0],data[i][1],data[i][2],data[i][3])) / (Math.max(data[i][0],data[i][1],data[i][2],data[i][3]) - Math.min(data[i][0],data[i][1],data[i][2],data[i][3]));
		}
	}
	for(var i=72; i < 84 ; i++){
		for(var j=0; j<3; j++){
			norm[i][j] = (data[i][j] - Math.min(data[i][0],data[i][1],data[i][2])) / (Math.max(data[i][0],data[i][1],data[i][2]) - Math.min(data[i][0],data[i][1],data[i][2]));
		}
		norm[i][3] = 0;
	}
}

function denormalisasi(data,i,value){
	return value * (Math.max(data[i][0],data[i][1],data[i][2],data[i][3]) - Math.min(data[i][0],data[i][1],data[i][2],data[i][3])) + Math.min(data[i][0],data[i][1],data[i][2],data[i][3]);
}

var utils = {
	Sigmoid: function(x){                                        // hitung Sigmoid
		const e = 2.71828;
		return 1/(1+Math.pow(e,-x));
	},
	countOut:function(neuron,pattern){                           //forward
		var result,x=0;
		if(neuron.prevAxons.length>0){
			for(var i=0;i<neuron.prevAxons.length;i++){
				x+=neuron.prevAxons[i].calculate(pattern);
			}
			neuron.value[pattern] = this.Sigmoid(x);
		}
	},
	deltaTarget:function(neuron,pattern){                         //delta layer output
		neuron.delta[pattern]=(inputs[pattern][3] - neuron.value[pattern])*Math.pow((neuron.value[pattern]*(1 - neuron.value[pattern])),1/powerFactor);
	},
	deltaHidden:function(neuron,pattern){                         //delta hiddenLayer
	var x = 0;
		for(var i=0;i<neuron.nextAxons.length;i++){
			x+=neuron.nextAxons[i].calculateDelta(pattern);
		}
		neuron.delta[pattern]=x*Math.pow((neuron.value[pattern]*(1 - neuron.value[pattern])),1/powerFactor);
	},
	countWeight:function(neuron){                                  //update bobot
		var result,x=0;
		if(neuron.prevAxons.length>0){
			for(var i=0; i < neuron.prevAxons.length; i++){
				for(var p=0;p<pola;p++){
					x += neuron.delta[p]*neuron.prevAxons[i].from.value[p];
				}
				neuron.prevAxons[i].dw = learnrate * x + momentum * neuron.prevAxons[i].dw;
				neuron.prevAxons[i].weight += neuron.prevAxons[i].dw;
			}
		}
	},
	countError:function(){                                         //error
	var x=0;
		for(var p=0;p<pola;p++){
			x+=Math.pow((ANN["outputLayer"][0].value[p] - inputs[p][3]),2);
		}
		error = (1/pola)*x;
	}
};

//The Neuron Object
var Neuron = function(id,value){
	this.id=id,
	this.value=value,
	this.delta=[],
	this.prevAxons=[],
	this.nextAxons=[],
	this.connect= function(axon){
		this.prevAxons.push(axon);
	}
	this.connect2= function(axon){
		this.nextAxons.push(axon);
	}
};

//The Axon Object
var Axon = function(weight,fromNeuron,toNeuron){
	this.weight= weight,
	this.dw=0.0;
	this.from= fromNeuron,
	this.to= toNeuron,
	this.calculate=function(pattern){
		return this.weight * this.from.value[pattern];
	}
	this.calculateDelta=function(pattern){
		return this.weight * this.to.delta[pattern];
	}
};

// The ANN Object
var ANN = {
	inputLayer		:[],
	hiddenLayer1	:[new Neuron("H1"), new Neuron("H2"), new Neuron("H3")],
	hiddenLayer2	:[new Neuron("L1")],
	outputLayer		:[new Neuron("O1")]
};

function generateBias(){
	for(var i=0;i<inputs.length;i++){
		biasVal.push(1);
		initVal.push(0);
	}
}
function generateInputs(){
	if (state === "learning") {
		if (item === "sovenir") {
			for(var a = 0; a <= 47;a++){
				inputs.push(dataSovenir[a]);
			}
		}else if(item === "pajangan") {
			for(var a = 0; a <= 47;a++){
				inputs.push(dataPajangan[a]);
			}
		}else{
			for(var a = 0; a <= 47;a++){
				inputs.push(dataAlatRumahTangga[a]);
			}
		}
		pola = 48;
	}else if(state === "testing"){
		if(item === "sovenir") {
			for(var a = 48; a <= 71;a++){
				inputs.push(dataSovenir[a]);
			}
		}else if(item === "pajangan") {
			for(var a = 48; a <= 71;a++){
				inputs.push(dataPajangan[a]);
			}
		}else{
			for(var a = 48; a <= 71;a++){
				inputs.push(dataAlatRumahTangga[a]);
			}
		}
		pola = 24;
	}else if(state === "ramal"){}
}
function initANN(){
	for(var layer in ANN){
		for(var neuron in ANN[layer]){
			if((layer != "inputLayer") && (neuron < ANN[layer].length || layer === "outputLayer")){
				ANN[layer][neuron].value = initVal;
			}
		}
	}
}

function forward(){
	for(var layer in ANN){
		for(var neuron in ANN[layer]){
			if((layer != "inputLayer") && (neuron < ANN[layer].length-1 || layer === "outputLayer")){
				for(var p=0;p<pola;p++){
					utils.countOut(ANN[layer][neuron],p);
				}
			}
		}
	}
}

function backward(){
	for(var a=0;a<3;a++){
		if (a===0){
			layer = "outputLayer";
		}else if(a===1){
			layer = "hiddenLayer2";
		}else if(a===2){
			layer = "hiddenLayer1";
		}
		for(var neuron in ANN[layer]){
			for(var p=0;p<pola;p++){
				if(layer === "outputLayer"){
					utils.deltaTarget(ANN[layer][neuron],p);
				}
				if(layer != "outputLayer"){
					utils.deltaHidden(ANN[layer][neuron],p);
				}
			}
		}
	}
}

function weightAdjustment(){
	for(var layer in ANN){
		for(var neuron in ANN[layer]){
			if((layer != "inputLayer") && (neuron < ANN[layer].length-1 || layer === "outputLayer")){
				utils.countWeight(ANN[layer][neuron]);
			}
		}
	}
}

function initiate(){
	normalisasi(sovenir,dataSovenir);
	normalisasi(pajangan,dataPajangan);
	normalisasi(alatRumahTangga,dataAlatRumahTangga);
	generateInputs();
	generateBias();
	initANN();
	ANN["inputLayer"]=[];
	ANN["hiddenLayer1"].push(new Neuron("B2"));
	ANN["hiddenLayer1"][3].value = biasVal;
	ANN["hiddenLayer2"].push(new Neuron("B3"));
	ANN["hiddenLayer2"][1].value = biasVal;
	//Connect All Hidden Layer Neurons and its corresponding Axons
	for(var i=0;i<ANN["hiddenLayer1"].length;i++){
		var axon = new Axon(Math.random(),ANN["hiddenLayer1"][i],ANN["hiddenLayer2"][0]);
		ANN["hiddenLayer1"][i].connect2(axon);
		ANN["hiddenLayer2"][0].connect(axon);
		helperIndex++;
	}
	for(var j=0;j<ANN["hiddenLayer2"].length;j++){
		var axon = new Axon(Math.random(),ANN["hiddenLayer2"][j],ANN["outputLayer"][0]);
		ANN["hiddenLayer2"][j].connect2(axon);
		ANN["outputLayer"][0].connect(axon);
		helperIndex++;
	}

	//Create Input Neurons and connect w/ Hidden Layer 1
	for (var m=0;m <= 3;m++){
		var neuronCreated;
		var neuronValue = [];
		if(m<3){
			for (var k=0;k < pola;k++){
				neuronValue.push(inputs[k][m]);
			}
			neuronCreated = new Neuron("I"+(m+1));
			ANN["inputLayer"].push(neuronCreated);
			ANN["inputLayer"][m].value = neuronValue;
		}else{
			neuronCreated= new Neuron("B1");
			ANN["inputLayer"].push(neuronCreated);
			ANN["inputLayer"][3].value = biasVal;
		}
		for (var l=0;l<ANN["hiddenLayer1"].length-1;l++){
			var axon = new Axon(Math.random(),neuronCreated,ANN["hiddenLayer1"][i]);
			neuronCreated.connect2(axon);
			ANN["hiddenLayer1"][l].connect(axon);
			helperIndex++;
		}
	}
    train();
}

function train(){
    setTimeout(function(){
        if(error>errorThreshold && epoch < maxEpoch){
			forward();
			utils.countError();
			if(error>errorThreshold){
				backward();
				weightAdjustment();
				epoch++;
			}
			var showEpoch = document.getElementById('jst');
			showEpoch.innerHTML = "Epoch : "+epoch+"<br>Error : "+error;
			train();
       	}
    },.00001)
}

function testing(){
	state = "testing";
	generateInputs();
	forward();
	
	var str="Target&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;Hasil<br/>";
	for(var a=0;a<pola;a++){
		str += inputs[a][3] + "&nbsp;&nbsp;&nbsp;&nbsp;" + ANN["outputLayer"][0].value[a] + "<br/>";
	}
	var container = document.getElementById('outputSection');
    container.innerHTML = str;	
}

function hasil(jenis, tahun, bulan){
	item = jenis;
	initiate();
	state = "ramal";
	if(tahun <= 2011){
		index = bulan * (tahun - 2007);
	}else if(tahun <= 2013){
		index = 47 + bulan * (tahun - 2011);
	}else if(tahun === 2014){
		index = 71 + bulan;
	}
	if(item === "sovenir"){
		inputs = dataSovenir[index];
	}else if(item === "pajangan"){
		inputs = dataPajangan[index];
	}else{
		inputs = dataAlatRumahTangga[index];
	}
	pola = 1;
	forward();
	var val = ANN["outputLayer"][0].value[0];
	if(item === "sovenir"){
		val = denormalisasi(sovenir,index,val);
	}else if(item === "pajangan"){
		val = denormalisasi(pajangan,index,val);
	}else{
		val = denormalisasi(alatRumahTangga,index,val);
	}
	var container = document.getElementById('result');
    container.innerHTML = parseInt(val) + " buah";	
}